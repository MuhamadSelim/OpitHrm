<?php

namespace Opit\Notes\TravelBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Opit\Notes\UserBundle\Entity\User;

/**
 * TravelRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TravelRequestRepository extends EntityRepository
{
    /**
     * Get back travel requests by the given search paramteres.
     *
     * @param array $parameters query parameters
     * @return array data of travel requests
     * @todo create search opportunity on TeamManager name
     * @todo create search opportunity on GeneralManager name
     */
    public function getTravelRequestsBySearchParams($parameters, $pagnationParameters)
    {
        $qb = $this->createQueryBuilder('tr');
        /**
         * Params which will be pass to the setParameter function.
         * @var array
         */
        $params = array();
        $whereParams = $parameters['search'];
        $orderParams = isset($parameters['order']) ? $parameters['order'] : array();

        if ($whereParams['trId']!="") {
            $params['trId'] = '%'.$whereParams['trId'].'%';
            $qb->andWhere($qb->expr()->like('tr.travelRequestId', ':trId'));
        }
        if ($whereParams['employeeName']!="") {
            $qb->leftJoin('tr.user', 'u', 'WITH');
            $params['employeeName'] = '%'.$whereParams['employeeName'].'%';
            $qb->andWhere($qb->expr()->like('u.employeeName', ':employeeName'));
        }
        if ($whereParams['opportunityName']!="") {
            $params['opportunityName'] = '%'.$whereParams['opportunityName'].'%';
            $qb->andWhere($qb->expr()->like('tr.opportunityName', ':opportunityName'));
        }
        if ($whereParams['destinationName']!="") {
            $params['destinationName'] = '%'.$whereParams['destinationName'].'%';
            $qb->leftJoin('tr.destinations', 'd', 'WITH');
            $qb->andWhere($qb->expr()->like('d.name', ':destinationName'));
        }
        if ($whereParams['departureDateFrom']!="") {
            $params['departureDateFrom'] = $whereParams['departureDateFrom'];
            $qb->andWhere($qb->expr()->gte('tr.departureDate', ':departureDateFrom'));
        }
        if ($whereParams['departureDateTo']!="") {
            $params['departureDateTo'] = $whereParams['departureDateTo'];
            $qb->andWhere($qb->expr()->lte('tr.departureDate', ':departureDateTo'));
        }
        if ($whereParams['arrivalDateFrom']!="") {
            $params['arrivalDateFrom'] = $whereParams['arrivalDateFrom'];
            $qb->andWhere($qb->expr()->gte('tr.arrivalDate', ':arrivalDateFrom'));
        }
        if ($whereParams['arrivalDateTo']!="") {
            $params['arrivalDateTo'] = $whereParams['arrivalDateTo'];
            $qb->andWhere($qb->expr()->lte('tr.arrivalDate', ':arrivalDateTo'));
        }

        if ($pagnationParameters['isAdmin']) {
            $qb->setParameters($params);
            $qb->setFirstResult($pagnationParameters['firstResult']);
            $qb->setMaxResults($pagnationParameters['maxResults']);
        } elseif ($pagnationParameters['isGeneralManager']) {
            $status = $pagnationParameters['entityManager']->getRepository('OpitNotesTravelBundle:Status')->find(1);
            $travelRequests = $this->createQueryBuilder('tr')
                ->leftJoin('tr.states', 's', 'WITH')
                ->where($travelRequests->expr()->notIn('s', ':status'))
                ->setParameter(':status', $status)
                ->setFirstResult($pagnationParameters['firstResult'])
                ->setMaxResults($pagnationParameters['maxResults']);
        } else {
            $params['user'] = $pagnationParameters['currentUser'];
            $qb->andWhere($qb->expr()->eq('tr.user', ':user'));
            $qb->setParameters($params);
            $qb->setFirstResult($pagnationParameters['firstResult']);
            $qb->setMaxResults($pagnationParameters['maxResults']);
        }
        
        if (isset($orderParams['field']) && $orderParams['field'] && isset($orderParams['dir']) && $orderParams['dir']) {
            $qb->orderBy('tr.'.$orderParams['field'], $orderParams['dir']);
        }
        
        return new Paginator($qb->getQuery(), $fetchJoinCollection = true);
    }
    
    public function getPaginaton($pagnationParameters)
    {
        $travelRequests = array();
        if ($pagnationParameters['isAdmin']) {
            $travelRequests = $this->createQueryBuilder('tr')
                ->setFirstResult($pagnationParameters['firstResult'])
                ->setMaxResults($pagnationParameters['maxResults'])
                ->getQuery();
        } elseif ($pagnationParameters['isGeneralManager']) {
            $status = $pagnationParameters['entityManager']->getRepository('OpitNotesTravelBundle:Status')->find(1);
            $travelRequests = $this->createQueryBuilder('tr')->leftJoin('tr.states', 's', 'WITH');
            if (null !== $travelRequests) {
                $travelRequests->where($travelRequests->expr()->notIn('s', ':status'));
                $travelRequests->setParameter(':status', $status);
            }
            $travelRequests->setFirstResult($pagnationParameters['firstResult']);
            $travelRequests->setMaxResults($pagnationParameters['maxResults']);
        } else {
            $travelRequests = $this->createQueryBuilder('tr')
                ->where('tr.user = :user')
                ->setParameter(':user', $pagnationParameters['currentUser'])
                ->setFirstResult($pagnationParameters['firstResult'])
                ->setMaxResults($pagnationParameters['maxResults'])
                ->getQuery();
        }
        
        return new Paginator($travelRequests, $fetchJoinCollection = true);
    }
    /**
     * Find all travel request with ordering by fields.
     * 
     * @param string $field
     * @param string $order
     * @return null|TravelRequest
     */
    public function findAllOrderByField($field, $order)
    {
        if (!isset($field) || !isset($order) ||empty($field) || empty($order)) {
            return null;
        }
        
        $qb = $this->createQueryBuilder('tr');
        
        if ("user"===$field) {
            $qb->leftJoin('tr.user', 'u', 'WITH');
            $qb->orderBy('u.employeeName', $order);
        } else {
             $qb->orderBy('tr.'.$field, $order);
        }
       
        $q = $qb->getQuery();
        return $q->getResult();
	}    
}
