// Generated by CoffeeScript 1.6.3
(function() {
  var $addCompanyTagLink, $addUserTagLink, $expensesPaidByMe, $expensesPaidByMeDesc, $expensesPaidByOpit, $expensesPaidByOpitDesc, $form, $formFieldset, $generalFormFieldset, $perDiem, addNewForm, calculateAdvancesPayback, calculatePerDiem, createDeleteButton, createTableRow, expenseDateChange, reCreateExpenses, validateAllExpenseDates, validateExpenseDate;

  createDeleteButton = function() {
    var $deleteButton;
    $deleteButton = $('<div>');
    $deleteButton.addClass('deleteFormFieldsetChild formFieldsetButton').html('<i class="fa fa-minus-square"></i>Delete');
    $deleteButton.on('click', function() {
      $(this).parent().remove();
      return calculateAdvancesPayback();
    });
    return $deleteButton;
  };

  validateExpenseDate = function(self) {
    var $errorLabel, arrivalDate, date, departureDate, isDateValid;
    isDateValid = true;
    date = self.val();
    self.addClass('display-inline-block');
    departureDate = $('#travelExpense_departureDateTime_date').val();
    arrivalDate = $('#travelExpense_arrivalDateTime_date').val();
    if (date > arrivalDate || date < departureDate) {
      if (self.parent().children('.custom-error').length < 1) {
        $errorLabel = $('<label>');
        $errorLabel.addClass('custom-error');
        $errorLabel.text('Invalid expense date.');
        return self.parent().append($errorLabel);
      }
    } else {
      return self.parent().children().remove('.custom-error');
    }
  };

  validateAllExpenseDates = function() {
    var $formFieldsetChilds, isDateValid;
    isDateValid = true;
    $formFieldsetChilds = $('.formFieldsetChild');
    $formFieldsetChilds.each(function() {
      var expenseDateField;
      expenseDateField = $(this).find('input[type=date]');
      validateExpenseDate(expenseDateField);
      if (expenseDateField.parent().children('.custom-error').length > 0) {
        isDateValid = false;
      }
    });
    return isDateValid;
  };

  expenseDateChange = function(parent) {
    var $dateOfExpenseSpent;
    $dateOfExpenseSpent = parent.find('input[type=date]');
    return $dateOfExpenseSpent.on('change', function() {
      return validateExpenseDate($(this));
    });
  };

  reCreateExpenses = function(self) {
    var $container, $selectedExpense;
    $selectedExpense = $('<span>').addClass('selected-expense');
    $selectedExpense.html(self.find('.te-expense-type').find(':selected').text());
    $container = $('<div>').addClass('formFieldsetChild');
    self.children('label:first').remove();
    $container.append(self);
    $container.append(createDeleteButton());
    $container.prepend($selectedExpense);
    expenseDateChange($container);
    return $container;
  };

  addNewForm = function(collectionHolder, parent) {
    var $formFieldsetChild, $selectedExpense, index, newForm, prototype;
    event.preventDefault();
    prototype = collectionHolder.data('prototype');
    index = collectionHolder.data('index');
    prototype = prototype.replace('<label class="required">__name__label__</label>', '');
    newForm = prototype.replace(/__name__/g, index);
    $selectedExpense = $('<span>').addClass('selected-expense');
    $selectedExpense.html('Expense type');
    $formFieldsetChild = $('<div>').addClass('formFieldsetChild');
    $formFieldsetChild.append(newForm);
    $formFieldsetChild.append(createDeleteButton());
    $formFieldsetChild.prepend($selectedExpense);
    expenseDateChange($($formFieldsetChild));
    $formFieldsetChild.find('.currency option[value=EUR]').attr('selected', 'selected');
    collectionHolder.data('index', index + 1);
    return parent.find('.addFormFieldsetChild').before($formFieldsetChild);
  };

  createTableRow = function(text, value, rowTitle) {
    var $row, $textColumn, $valueColumn;
    $row = $('<tr>');
    $textColumn = $('<td>');
    $textColumn.addClass('bgGrey bold');
    $textColumn.html(text + ' <i class="fa fa-clock-o" title="' + rowTitle + '"></i>');
    $valueColumn = $('<td>');
    $valueColumn.text(value + ' EUR');
    if (text === 'Total') {
      $textColumn.html('');
      $valueColumn.html('<strong>Total</strong><br /> ' + value + ' EUR');
    }
    $row.append($textColumn);
    $row.append($valueColumn);
    return $row;
  };

  $perDiem = $('<div>');

  calculateAdvancesPayback = function() {
    var $break, $errorLabel, advancesRecieved, payback;
    advancesRecieved = parseInt($('#travelExpense_advancesRecieved').val());
    payback = advancesRecieved;
    $('.amount').each(function() {
      var amount, paidInAdvance;
      paidInAdvance = $(this).closest('.formFieldsetChild').find('.paid-in-advance').val();
      if (paidInAdvance === '0') {
        amount = parseInt($(this).val());
        if (!isNaN(amount)) {
          return payback -= amount;
        }
      }
    });
    if (payback <= advancesRecieved && payback >= 0) {
      $('#travelExpense_advancesSpent').html(advancesRecieved - payback);
      $('#travelExpense_advancesPayback').html(payback);
      $('.custom-error').each(function() {
        $(this).parent().children().remove('br');
        return $(this).remove();
      });
      return true;
    } else {
      if ($('.formFieldset:nth-child(2)').children('.custom-error').length === 0) {
        $break = $('<br>');
        $errorLabel = $('<label>');
        $errorLabel.text('Advance amount spent cannot exceed advances recieved.');
        $errorLabel.addClass('custom-error');
        $errorLabel.insertAfter($('.formFieldset:nth-child(2) h3'));
        $break.insertAfter($errorLabel);
      }
      return false;
    }
  };

  calculatePerDiem = function(departureDate, departureHour, departureMinute, arrivalDate, arrivalHour, arrivalMinute) {
    var arrival, departure;
    departure = new Date("" + departureDate + " " + departureHour + ":" + departureMinute);
    arrival = new Date("" + arrivalDate + " " + arrivalHour + ":" + arrivalMinute);
    return $.ajax({
      method: 'POST',
      url: Routing.generate('OpitNotesTravelBundle_expense_perdiem'),
      data: {
        arrival: arrival,
        departure: departure
      }
    }).done(function(data) {
      var $perDiemAmount, $perDiemDay, $perDiemHeader, $perDiemTable;
      $('.perDiemTable').remove();
      $perDiemTable = $('<table>');
      $perDiemTable.addClass('perDiemTable bordered');
      $perDiemHeader = $('<tr>');
      $perDiemDay = $('<th>');
      $perDiemDay.text('Day');
      $perDiemAmount = $('<th>');
      $perDiemAmount.text('Amount');
      $perDiemHeader.append($perDiemDay);
      $perDiemHeader.append($perDiemAmount);
      $perDiemTable.append($perDiemHeader);
      if (data['totalTravelHoursOnSameDay'] > 0) {
        $perDiemTable.append(createTableRow('Travel hours', data['totalTravelHoursOnSameDay'], ""));
        return $perDiemTable.append(createTableRow('Total', data['totalPerDiem'], ""));
      } else {
        $perDiemTable.append(createTableRow('Departure', data['departurePerDiem'], "Number of hours traveled on departure day " + data['departureHours'] + "."));
        $perDiemTable.append(createTableRow("Full (" + data['daysBetween'] + ")", data['daysBetweenPerDiem'], "Number of full days " + data['daysBetween'] + "."));
        $perDiemTable.append(createTableRow('Arrival', data['arrivalPerDiem'], "Number of hours traveled on arrival day " + data['arrivalHours'] + "."));
        $perDiemTable.append(createTableRow('Total', data['totalPerDiem']));
        return $perDiem.append($perDiemTable);
      }
    });
  };

  $(document).ready(function() {
    var $advancesPayback, $advancesPaybackLabel, $advancesPaybackText, $advancesRecieved, $arrivalHour, $arrivalMinute, $buttonParent, $departureHour, $departureMinute, $perDiemAmountsTable, $perDiemTitle, $secondFormFieldset, $td, $thirdFormFieldset, $toSettle, $toSettleLabel, $toSettleText, $tr, arrivalDate, arrivalDateVal, arrivalHourVal, arrivalMinuteVal, arrivalTime, companyPaidExpensesIndex, departureDate, departureDateVal, departureHourVal, departureMinuteVal, departureTime, userPaidExpensesIndex;
    $buttonParent = $('#travelExpense_add_travel_expense').parent();
    $(document).data('notes').funcs.createButton('Cancel', 'button display-inline-block', '', $buttonParent, 'OpitNotesTravelBundle_travel_list');
    $(document).data('notes').funcs.makeElementToggleAble('h3', $('.formFieldset'), '.elementContainer');
    arrivalDate = $('#travelExpense_arrivalDateTime_date');
    arrivalTime = $('#travelExpense_arrivalDateTime_time');
    departureDate = $('#travelExpense_departureDateTime_date');
    departureTime = $('#travelExpense_departureDateTime_time');
    arrivalDate.attr('readonly', 'readonly');
    departureDate.attr('readonly', 'readonly');
    arrivalTime.addClass('inlineElements time-picker');
    departureTime.addClass('inlineElements time-picker');
    arrivalDate.css({
      display: 'inline-block'
    });
    departureDate.css({
      display: 'inline-block'
    });
    $secondFormFieldset = $('#travelExpense').children('.formFieldset:nth-child(2)');
    $thirdFormFieldset = $('#travelExpense').children('.formFieldset:nth-child(3)');
    $secondFormFieldset.append($('<div>').addClass('elementContainer'));
    $thirdFormFieldset.append($('<div>').addClass('elementContainer'));
    $secondFormFieldset.find('.elementContainer').append($addUserTagLink);
    $thirdFormFieldset.find('.elementContainer').append($addCompanyTagLink);
    companyPaidExpensesIndex = 0;
    userPaidExpensesIndex = 0;
    if ($('#travelExpense_companyPaidExpenses').children('div').length > 0) {
      $('#travelExpense_companyPaidExpenses').children('div').each(function() {
        var $container;
        $container = reCreateExpenses($(this));
        $('#travelExpense').children('.formFieldset:nth-child(3)').find('.addFormFieldsetChild').before($container);
        return companyPaidExpensesIndex++;
      });
    }
    if ($('#travelExpense_userPaidExpenses').children('div').length > 0) {
      $('#travelExpense_userPaidExpenses').children('div').each(function() {
        var $container;
        $container = reCreateExpenses($(this));
        $('#travelExpense').children('.formFieldset:nth-child(2)').find('.addFormFieldsetChild').before($container);
        return userPaidExpensesIndex++;
      });
    }
    $('#travelExpense_companyPaidExpenses').data('index', companyPaidExpensesIndex);
    $('#travelExpense_userPaidExpenses').data('index', userPaidExpensesIndex);
    $('#travelExpense_companyPaidExpenses').parent().children('label').remove();
    $('#travelExpense_userPaidExpenses').parent().children('label').remove();
    $('#travelExpense').css({
      display: 'block'
    });
    $perDiemAmountsTable = $('<table>');
    $perDiemAmountsTable.addClass('formFieldsetDescription display-none');
    $.ajax({
      method: 'POST',
      url: Routing.generate('OpitNotesTravelBundle_expense_perdiemvalues')
    }).done(function(data) {
      var $tdAmount, $tdHours, $tr, key, value, _results;
      _results = [];
      for (key in data) {
        value = data[key];
        $tr = $('<tr>');
        $tdHours = $('<td>');
        $tdHours.attr('width', '100px');
        $tdHours.text("Over " + key + " hours");
        $tdAmount = $('<td>');
        $tdAmount.text(value + ' EUR');
        $tr.append($tdHours);
        $tr.append($tdAmount);
        _results.push($perDiemAmountsTable.append($tr));
      }
      return _results;
    });
    $tr = $('<tr>');
    $td = $('<td>');
    $td.attr('colspan', 2);
    $td.html('Per diem is given to employee considering the following slab.');
    $tr.append($td);
    $perDiemAmountsTable.prepend($tr);
    $perDiem.append($perDiemAmountsTable);
    $perDiemTitle = $('<h3>');
    $perDiemTitle.html('Per diem <i class="fa fa-question-circle per-diem-question"></i>');
    $perDiem.append($perDiemTitle);
    $perDiem.addClass('formFieldset');
    $perDiem.insertBefore($('#travelExpense_add_travel_expense').parent());
    $('.fa-question-circle').on('mouseover', function() {
      var $description;
      $description = $(this).parent().parent().find('.formFieldsetDescription');
      return $description.removeClass('display-none');
    });
    $('.fa-question-circle').on('mouseout', function() {
      return $('.formFieldsetDescription').addClass('display-none');
    });
    $departureHour = $('#travelExpense_departureDateTime_time_hour');
    $departureMinute = $('#travelExpense_departureDateTime_time_minute');
    $arrivalHour = $('#travelExpense_arrivalDateTime_time_hour');
    $arrivalMinute = $('#travelExpense_arrivalDateTime_time_minute');
    departureDateVal = departureDate.val();
    departureHourVal = $departureHour.val();
    departureMinuteVal = $departureMinute.val();
    arrivalDateVal = arrivalDate.val();
    arrivalHourVal = $arrivalHour.val();
    arrivalMinuteVal = $arrivalMinute.val();
    if (!isNewTravelExpense) {
      calculatePerDiem(departureDateVal, departureHourVal, departureMinuteVal, arrivalDateVal, arrivalHourVal, arrivalMinuteVal);
    }
    $departureHour.on('change', function() {
      departureHourVal = $departureHour.val();
      return calculatePerDiem(departureDateVal, departureHourVal, departureMinuteVal, arrivalDateVal, arrivalHourVal, arrivalMinuteVal);
    });
    $departureMinute.on('change', function() {
      departureMinuteVal = $departureMinute.val();
      return calculatePerDiem(departureDateVal, departureHourVal, departureMinuteVal, arrivalDateVal, arrivalHourVal, arrivalMinuteVal);
    });
    $arrivalHour.on('change', function() {
      arrivalHourVal = $arrivalHour.val();
      return calculatePerDiem(departureDateVal, departureHourVal, departureMinuteVal, arrivalDateVal, arrivalHourVal, arrivalMinuteVal);
    });
    $arrivalMinute.on('change', function() {
      arrivalMinuteVal = $arrivalMinute.val();
      return calculatePerDiem(departureDateVal, departureHourVal, departureMinuteVal, arrivalDateVal, arrivalHourVal, arrivalMinuteVal);
    });
    $advancesRecieved = $('#travelExpense_advancesRecieved');
    if ($advancesRecieved.val() === '') {
      $advancesRecieved.val(0);
    }
    $advancesPayback = $('<div>');
    $advancesPayback.addClass('inlineElements');
    $advancesPaybackLabel = $('<label>');
    $advancesPaybackLabel.html('Advances payback');
    $advancesPaybackText = $('<div>');
    $advancesPaybackText.html('0');
    $advancesPaybackText.addClass('custom-field');
    $advancesPaybackText.attr('id', 'travelExpense_advancesPayback');
    $advancesPayback.append($advancesPaybackLabel);
    $advancesPayback.append($advancesPaybackText);
    $toSettle = $('<div>');
    $toSettle.addClass('inlineElements');
    $toSettleLabel = $('<label>');
    $toSettleLabel.html('Advances spent');
    $toSettleText = $('<div>');
    $toSettleText.html('0');
    $toSettleText.addClass('custom-field');
    $toSettleText.attr('id', 'travelExpense_advancesSpent');
    $toSettle.append($toSettleLabel);
    $toSettle.append($toSettleText);
    $('#travelExpense_advancesRecieved').parent().after($toSettle);
    $toSettle.after($advancesPayback);
    calculateAdvancesPayback();
    $('#travelExpense_advancesRecieved').on('change', function() {
      return calculateAdvancesPayback();
    });
    $('.formFieldset').on('change', '.amount', function() {
      return calculateAdvancesPayback();
    });
    $('.formFieldset').on('change', '.paid-in-advance', function() {
      return calculateAdvancesPayback();
    });
    return $('.changeState').on('change', function() {
      var parameters, statusId, travelExpenseId;
      statusId = $(this).val();
      parameters = window.location.pathname.split('/');
      travelExpenseId = parameters[parameters.length - 1];
      return $.ajax({
        method: 'POST',
        url: Routing.generate('OpitNotesTravelBundle_expense_state'),
        data: {
          'statusId': statusId,
          'travelExpenseId': travelExpenseId
        }
      }).done(function(data) {
        return window.location.href = Routing.generate('OpitNotesTravelBundle_travel_list');
      }).fail(function(data) {
        return console.warn('Error occured while saving state for travel expense.');
      });
    });
  });

  $formFieldset = $('<div>');

  $formFieldset.addClass('formFieldset');

  $generalFormFieldset = $formFieldset.clone().addClass('generalFormFieldset');

  $expensesPaidByMe = $formFieldset.clone().append($('<h3>').html('Expenses paid by me <i class="fa fa-question-circle"></i>'));

  $expensesPaidByOpit = $formFieldset.clone().append($('<h3>').html('Expenses paid by opit <i class="fa fa-question-circle"></i>'));

  $('#travelExpense').prepend($expensesPaidByOpit);

  $('#travelExpense').prepend($expensesPaidByMe);

  $('#travelExpense').prepend($generalFormFieldset);

  $('#travelExpense').addClass('travelForm');

  $expensesPaidByOpitDesc = $('<div>');

  $expensesPaidByOpitDesc.html('Expenses paid by OPIT (already paid by OPIT).');

  $expensesPaidByOpitDesc.addClass('formFieldsetDescription short-description display-none');

  $expensesPaidByMeDesc = $('<div>');

  $expensesPaidByMeDesc.html('Expenses paid by employee (payable to your own bank account).');

  $expensesPaidByMeDesc.addClass('formFieldsetDescription short-description display-none');

  $expensesPaidByOpit.append($expensesPaidByOpitDesc);

  $expensesPaidByMe.append($expensesPaidByMeDesc);

  $('.formFieldset').on('change', '.te-expense-type', function() {
    return $(this).closest('.formFieldsetChild').children('.selected-expense').html($("#" + ($(this).attr('id')) + " :selected").text());
  });

  $('.te-claim').each(function(index) {
    $(this).parent().addClass('inlineElements');
    $generalFormFieldset.append($(this).parent());
    if ($(this).hasClass('display-none')) {
      $(this).removeClass('display-none');
      $(this).parent().addClass('display-none');
    }
    if (index % 2) {
      return $generalFormFieldset.append($('<br>'));
    }
  });

  $addCompanyTagLink = $('<div class="addFormFieldsetChild formFieldsetButton"><i class="fa fa-plus-square"></i>Add company expense</div>');

  $addCompanyTagLink.on('click', function() {
    return addNewForm($('#travelExpense_companyPaidExpenses'), $('#travelExpense').children('.formFieldset:nth-child(3)'));
  });

  $addUserTagLink = $('<div class="addFormFieldsetChild formFieldsetButton"><i class="fa fa-plus-square"></i>Add user expense</div>');

  $addUserTagLink.on('click', function() {
    return addNewForm($('#travelExpense_userPaidExpenses'), $('#travelExpense').children('.formFieldset:nth-child(2)'));
  });

  $form = $('#travelExpenseForm');

  $.validator.addMethod('compare', function(value, element) {
    var arrival, arrivalDate, arrivalTimeHour, arrivalTimeMinute, departure, departureDate, departureTimeHour, departureTimeMinute;
    departureDate = $('#travelExpense_departureDateTime_date').val();
    arrivalDate = $('#travelExpense_arrivalDateTime_date').val();
    departureTimeHour = $('#travelExpense_departureDateTime_time_hour').val();
    arrivalTimeHour = $('#travelExpense_arrivalDateTime_time_hour').val();
    departureTimeMinute = $('#travelExpense_departureDateTime_time_minute').val();
    arrivalTimeMinute = $('#travelExpense_arrivalDateTime_time_minute').val();
    departure = departureDate + ' ' + departureTimeHour + ':' + departureTimeMinute;
    arrival = arrivalDate + ' ' + arrivalTimeHour + ':' + arrivalTimeMinute;
    departure = new Date(departure);
    arrival = new Date(arrival);
    $('#travelExpense_arrivalDateTime_time_minute').css({
      border: 'solid 1px rgb(170, 170, 170)'
    });
    return departure < arrival;
  }, 'Arrival date should not be smaller than departure date.');

  $form.validate({
    ignore: [],
    rules: {
      'travelExpense[arrivalDateTime][time][minute]': 'compare',
      'travelExpense[taxIdentification]': {
        maxlength: 11
      },
      'travelExpense[toSettle]': {
        digits: true
      }
    }
  });

  $('#travelExpense_add_travel_expense').on('click', function() {
    event.preventDefault();
    if (!$(this).hasClass('button-disabled')) {
      if ($form.valid() && calculateAdvancesPayback() && validateAllExpenseDates()) {
        return $.ajax({
          method: 'POST',
          url: Routing.generate('OpitNotesTravelBundle_expense_show_details'),
          data: 'preview=1&' + $form.serialize()
        }).done(function(data) {
          var $preview;
          $preview = $('<div id="dialog-travelrequest-preview"></div>').html(data);
          return $preview.dialog({
            open: function() {
              return $('.ui-dialog-title').append('<i class="fa fa-list-alt"></i> Details');
            },
            close: function() {
              return $preview.dialog("destroy");
            },
            width: 550,
            maxHeight: $(window).outerHeight() - 100,
            modal: true,
            buttons: {
              Cancel: function() {
                $preview.dialog("destroy");
              },
              Save: function() {
                $form.submit();
                $preview.dialog("destroy");
              }
            }
          });
        }).fail(function() {
          return $('<div></div>').html('The travel expense could not be saved due to an error.').dialog({
            title: 'Error'
          });
        });
      }
    }
  });

}).call(this);
