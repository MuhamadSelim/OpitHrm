// Generated by CoffeeScript 1.7.1
(function() {
  $.extend(true, $(document).data('notes'), {
    funcs: {
      clientSideListOrdering: function($self, inverse) {
        var header, index;
        header = $self.parent();
        index = header.index();
        header.closest('table').find('td').filter(function() {
          return $(this).index() === index;
        }).sort(function(a, b) {
          a = $(a).text();
          b = $(b).text();
          if ((isNaN(a) || isNaN(b) ? a > b : +a > +b)) {
            if (inverse) {
              return -1;
            } else {
              return 1;
            }
          } else {
            if (inverse) {
              return 1;
            } else {
              return -1;
            }
          }
        }, function() {
          return this.parentNode;
        });
        inverse = !inverse;
        $('#list-table').find('.fa-sort').removeClass('fa-sort-desc').removeClass('fa-sort-asc');
        $self.removeClass('fa-sort-asc').addClass(inverse ? 'fa-sort-desc' : 'fa-sort-asc');
        return inverse;
      },
      serverSideListOrdering: function($self, dataField, url, toRelplace) {
        var $form, order;
        $form = $('#searchFormWrapper').find('form');
        order = $form.find('#order_dir').val();
        order = order === 'desc' ? 'asc' : 'desc';
        $form.find('#order_field').val(dataField);
        $form.find('#order_dir').val(order);
        return $.ajax({
          method: 'POST',
          url: Routing.generate(url),
          data: 'showList=1&' + $form.serialize()
        }).done(function(data) {
          var $toReplace;
          $toReplace = $('#' + toRelplace).html(data);
          $(document).data('notes').funcs.initPager();
          $(document).data('notes').funcs.initDeleteMultipleListener();
          return $toReplace.find('th').eq($self.parent().index()).find('i').addClass(order === 'desc' ? 'fa-sort-desc' : 'fa-sort-asc');
        });
      },
      changeDeleteButton: function(disableInputCheck) {
        var $deleteButton;
        if (disableInputCheck == null) {
          disableInputCheck = false;
        }
        $deleteButton = $('#delete').addClass('button-disabled').attr('disabled', 'disabled');
        if (disableInputCheck === false) {
          return $('#list-table tr td input[type=checkbox]').each(function() {
            if ($(this).prop('checked')) {
              $deleteButton.removeClass('button-disabled');
              $deleteButton.removeAttr('disabled');
              return false;
            }
          });
        }
      },
      initDeleteMultipleListener: function() {
        var $deleteButton;
        $deleteButton = $('#delete');
        $deleteButton.attr('disabled', 'disabled');
        $deleteButton.addClass('button-disabled');
        $deleteButton.removeClass('delete');
        return $('#list-table input[type="checkbox"]').on('change', function() {
          return $(document).data('notes').funcs.changeDeleteButton();
        });
      },
      initListPageListeners: function() {
        $('.icon-disabled').on('click', function(event) {
          return event.preventDefault();
        });
        $('#list-table th .fa-trash-o').click(function() {
          $('.deleteMultipleTravelRequest').checkAll();
          $('.deleteMultipleTravelExpense').checkAll();
          $('.deleteMultipleLeaveRequest').checkAll();
        });
        $('#list-table .deleteSingeTravelRequest').click(function(event) {
          event.preventDefault();
          return $(document).data('notes').funcs.deleteSingleRequest('request', $(this));
        });
        return $('#delete').click(function() {
          var checkBoxClass, errorText, message, requests, selectedRequests, title, url, warningMessage;
          if ($('#userlistWrapper').length === 1) {
            title = 'User delete';
            message = 'user(s)';
            url = Routing.generate('OpitNotesUserBundle_user_delete');
            $(document).data('notes').funcs.deleteAction(title, message, url, '.list-delete-user');
            return false;
          } else if ($('#travel_list').length === 1) {
            warningMessage = 'Are you sure you want to delete the selected travel requests?';
            checkBoxClass = '.deleteMultipleTravelRequest';
            url = Routing.generate('OpitNotesTravelBundle_travel_delete');
            title = 'Travel request removal';
            errorText = 'The travel request could not be deleted due to an error.';
          } else if ($('#leave_list').length === 1) {
            warningMessage = 'Are you sure you want to delete the selected leave requests?';
            checkBoxClass = '.deleteMultipleLeaveRequest';
            url = Routing.generate('OpitNotesHolidayBundle_leaverequest_delete');
            title = 'Leave request removal';
            errorText = 'The leave request could not be deleted due to an error.';
          } else {
            return false;
          }
          requests = [];
          selectedRequests = [];
          $(checkBoxClass).each(function() {
            if ($(this).is(':checked')) {
              requests.push($(this).val());
              return selectedRequests.push($(this).parent().parent());
            }
          });
          $('<div></div>').html(warningMessage).dialog({
            title: title,
            buttons: {
              Yes: function() {
                $.ajax({
                  method: 'POST',
                  url: url,
                  data: {
                    'id': requests
                  }
                }).done(function(data) {
                  $(selectedRequests).each(function() {
                    return $(this).remove();
                  });
                }).fail(function() {
                  return $('<div></div>').html(errorText).dialog({
                    title: 'Error'
                  });
                });
                $(this).dialog('close');
              },
              No: function() {
                $(this).dialog('close');
              }
            },
            close: function() {
              $(this).dialog('destroy');
            }
          });
        });
      },
      setPagerNumbering: function() {
        var $newPagerItem, max, maxPages, min, num, offset, pages, pagesOnOneSide, _i, _results;
        offset = $('#pager').data('offset');
        pages = $('#pager').data('pages');
        maxPages = $('#pager').data('max');
        $('#pager span').remove();
        pagesOnOneSide = Math.floor(maxPages / 2);
        min = offset - pagesOnOneSide;
        max = offset + pagesOnOneSide;
        if (0 >= min) {
          min = 1;
          max = maxPages;
        }
        if (max > pages) {
          min = pages - maxPages + 1;
          max = pages;
        }
        _results = [];
        for (num = _i = max; max <= min ? _i <= min : _i >= min; num = max <= min ? ++_i : --_i) {
          $newPagerItem = $('<span>').html(num).addClass('cursor-pointer').attr('data-offset', num);
          _results.push($newPagerItem.insertAfter($('#pager .fa-caret-left')));
        }
        return _results;
      },
      reInitializeListTableListeners: function() {
        $(document).data('notes').funcs.setPagerNumbering();
        $(document).data('notes').funcs.initListPageListeners();
        $(document).data('notes').funcs.initPager();
        return $(document).data('notes').funcs.initDeleteMultipleListener();
      },
      initPager: function() {
        var $pager, maxVisiblepages, requestUrl, selectedPageOffset, totalNumberOfPages;
        $pager = $('#pager');
        selectedPageOffset = $pager.data('offset');
        maxVisiblepages = $pager.data('max');
        $pager.find('[data-offset="' + selectedPageOffset + '"]').addClass('selected-page');
        totalNumberOfPages = $pager.data('pages');
        requestUrl = $pager.data('url');
        if (selectedPageOffset === totalNumberOfPages) {
          $('.fa-caret-right').addClass('visibility-hidden');
        }
        if (selectedPageOffset === 1) {
          $('.fa-caret-left').addClass('visibility-hidden');
        }
        if (totalNumberOfPages < maxVisiblepages) {
          $('.fa-caret-left').addClass('visibility-hidden');
          $('.fa-caret-right').addClass('visibility-hidden');
        }
        $pager.on('mousedown', 'span', function(event) {
          var $form, offset, requestData, self;
          self = $(this);
          offset = $(this).data('offset');
          $form = $('#searchFormWrapper').find('form');
          requestData = "offset=" + (offset - 1);
          if ($form.formIsEmpty() === true) {
            requestData = requestData + '&' + $form.serialize();
          }
          return $.ajax({
            method: 'POST',
            url: requestUrl,
            data: requestData
          }).done(function(data) {
            if (data.indexOf('error') < 0) {
              $('#list-table').parent().replaceWith(data);
            }
            return $(document).data('notes').funcs.reInitializeListTableListeners();
          });
        });
        return $('#pager i').on('mousedown', function(event) {
          var $form, $selectedPage, offset, requestData, self;
          self = $(this);
          $selectedPage = $('.selected-page');
          if ($(this).hasClass('fa-caret-left')) {
            offset = selectedPageOffset - 1;
          } else if ($(this).hasClass('fa-caret-right')) {
            offset = selectedPageOffset + 1;
          }
          $form = $('#searchFormWrapper').find('form');
          requestData = "offset=" + (offset - 1);
          if ($form.formIsEmpty() === true) {
            requestData = requestData + '&' + $form.serialize();
          }
          return $.ajax({
            method: 'POST',
            url: requestUrl,
            data: requestData
          }).done(function(data) {
            $('#list-table').parent().replaceWith(data);
            return $(document).data('notes').funcs.reInitializeListTableListeners();
          });
        });
      }
    }
  });

}).call(this);
